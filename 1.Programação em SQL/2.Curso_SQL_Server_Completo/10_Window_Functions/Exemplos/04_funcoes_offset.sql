-- =============================================
-- M√≥dulo 10: Window Functions
-- Arquivo: 04_funcoes_offset.sql
-- Descri√ß√£o: LAG, LEAD, FIRST_VALUE, LAST_VALUE
-- Baseado nos arquivos existentes de Windows Functions
-- =============================================

-- =============================================
-- EXEMPLO 1: FIRST_VALUE e LAST_VALUE
-- =============================================
-- Baseado no arquivo: 1.Batida Ponto (Firt e Last Value).sql
-- An√°lise de hor√°rios de entrada e sa√≠da

WITH BatidaPonto AS (
    SELECT 
        BusinessEntityID AS FuncionarioID,
        CAST('2024-01-15' AS DATE) AS DataBatida,
        CAST('08:00:00' AS TIME) AS HoraBatida,
        'Entrada' AS TipoBatida
    UNION ALL
    SELECT BusinessEntityID, '2024-01-15', '12:00:00', 'Sa√≠da Almo√ßo'
    FROM Person.Person WHERE BusinessEntityID <= 5
    UNION ALL
    SELECT BusinessEntityID, '2024-01-15', '13:00:00', 'Volta Almo√ßo'
    FROM Person.Person WHERE BusinessEntityID <= 5
    UNION ALL
    SELECT BusinessEntityID, '2024-01-15', '18:00:00', 'Sa√≠da'
    FROM Person.Person WHERE BusinessEntityID <= 5
)
SELECT 
    FuncionarioID,
    DataBatida,
    HoraBatida,
    TipoBatida,
    -- Primeira batida do dia (entrada)
    FIRST_VALUE(HoraBatida) OVER (
        PARTITION BY FuncionarioID, DataBatida 
        ORDER BY HoraBatida
        ROWS UNBOUNDED PRECEDING
    ) AS PrimeiraBatida,
    -- √öltima batida do dia (sa√≠da)
    LAST_VALUE(HoraBatida) OVER (
        PARTITION BY FuncionarioID, DataBatida 
        ORDER BY HoraBatida
        ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
    ) AS UltimaBatida,
    -- C√°lculo de horas trabalhadas (simplificado)
    DATEDIFF(MINUTE, 
        FIRST_VALUE(HoraBatida) OVER (
            PARTITION BY FuncionarioID, DataBatida 
            ORDER BY HoraBatida
            ROWS UNBOUNDED PRECEDING
        ),
        LAST_VALUE(HoraBatida) OVER (
            PARTITION BY FuncionarioID, DataBatida 
            ORDER BY HoraBatida
            ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
        )
    ) / 60.0 AS HorasTrabalhadasTotal
FROM BatidaPonto
ORDER BY FuncionarioID, HoraBatida;

-- =============================================
-- EXEMPLO 2: LAG e LEAD - An√°lise Temporal
-- =============================================
-- Compara√ß√£o de vendas com per√≠odos anteriores e posteriores

WITH VendasMensais AS (
    SELECT 
        YEAR(OrderDate) AS Ano,
        MONTH(OrderDate) AS Mes,
        COUNT(*) AS QtdePedidos,
        SUM(TotalDue) AS TotalVendas,
        AVG(TotalDue) AS MediaVendas
    FROM Sales.SalesOrderHeader
    WHERE OrderDate >= '2013-01-01'
    GROUP BY YEAR(OrderDate), MONTH(OrderDate)
)
SELECT 
    Ano,
    Mes,
    FORMAT(DATEFROMPARTS(Ano, Mes, 1), 'MMMM yyyy', 'pt-BR') AS PeriodoFormatado,
    QtdePedidos,
    FORMAT(TotalVendas, 'C', 'pt-BR') AS TotalVendas,
    
    -- Compara√ß√£o com m√™s anterior
    LAG(TotalVendas, 1) OVER (ORDER BY Ano, Mes) AS VendasMesAnterior,
    TotalVendas - LAG(TotalVendas, 1) OVER (ORDER BY Ano, Mes) AS DiferencaMesAnterior,
    
    -- Compara√ß√£o com pr√≥ximo m√™s
    LEAD(TotalVendas, 1) OVER (ORDER BY Ano, Mes) AS VendasProximoMes,
    LEAD(TotalVendas, 1) OVER (ORDER BY Ano, Mes) - TotalVendas AS DiferencaProximoMes,
    
    -- Compara√ß√£o com mesmo m√™s do ano anterior
    LAG(TotalVendas, 12) OVER (ORDER BY Ano, Mes) AS VendasMesmoMesAnoAnterior,
    
    -- Percentual de crescimento
    CASE 
        WHEN LAG(TotalVendas, 1) OVER (ORDER BY Ano, Mes) > 0
        THEN ROUND(
            ((TotalVendas - LAG(TotalVendas, 1) OVER (ORDER BY Ano, Mes)) * 100.0) / 
            LAG(TotalVendas, 1) OVER (ORDER BY Ano, Mes), 2
        )
        ELSE NULL
    END AS PercentualCrescimentoMensal,
    
    -- Tend√™ncia (crescimento/queda)
    CASE 
        WHEN TotalVendas > LAG(TotalVendas, 1) OVER (ORDER BY Ano, Mes) THEN '‚ÜóÔ∏è Crescimento'
        WHEN TotalVendas < LAG(TotalVendas, 1) OVER (ORDER BY Ano, Mes) THEN '‚ÜòÔ∏è Queda'
        WHEN TotalVendas = LAG(TotalVendas, 1) OVER (ORDER BY Ano, Mes) THEN '‚û°Ô∏è Est√°vel'
        ELSE 'üÜï Primeiro per√≠odo'
    END AS Tendencia
FROM VendasMensais
ORDER BY Ano, Mes;

-- =============================================
-- EXEMPLO 3: An√°lise de √öltimas N Vendas
-- =============================================
-- Baseado no arquivo: 2.Ultimas 3 vendas(PRECEDING AND CURRENT ROW).sql
-- An√°lise das √∫ltimas 3 vendas por cliente

WITH UltimasVendas AS (
    SELECT 
        SOH.CustomerID,
        P.FirstName + ' ' + ISNULL(P.LastName, '') AS NomeCliente,
        SOH.SalesOrderID,
        SOH.OrderDate,
        SOH.TotalDue,
        ROW_NUMBER() OVER (
            PARTITION BY SOH.CustomerID 
            ORDER BY SOH.OrderDate DESC
        ) AS RankingVenda
    FROM Sales.SalesOrderHeader SOH
    INNER JOIN Sales.Customer C ON SOH.CustomerID = C.CustomerID
    LEFT JOIN Person.Person P ON C.PersonID = P.BusinessEntityID
    WHERE SOH.OrderDate >= '2014-01-01'
)
SELECT 
    CustomerID,
    NomeCliente,
    SalesOrderID,
    OrderDate,
    FORMAT(TotalDue, 'C', 'pt-BR') AS TotalDue,
    RankingVenda,
    
    -- Valor da venda anterior
    LAG(TotalDue, 1) OVER (
        PARTITION BY CustomerID 
        ORDER BY OrderDate
    ) AS VendaAnterior,
    
    -- Diferen√ßa com venda anterior
    TotalDue - LAG(TotalDue, 1) OVER (
        PARTITION BY CustomerID 
        ORDER BY OrderDate
    ) AS DiferencaVendaAnterior,
    
    -- M√©dia das √∫ltimas 3 vendas (incluindo atual)
    AVG(TotalDue) OVER (
        PARTITION BY CustomerID 
        ORDER BY OrderDate
        ROWS BETWEEN 2 PRECEDING AND CURRENT ROW
    ) AS MediaUltimas3Vendas,
    
    -- Maior valor das √∫ltimas 3 vendas
    MAX(TotalDue) OVER (
        PARTITION BY CustomerID 
        ORDER BY OrderDate
        ROWS BETWEEN 2 PRECEDING AND CURRENT ROW
    ) AS MaiorUltimas3Vendas,
    
    -- Menor valor das √∫ltimas 3 vendas
    MIN(TotalDue) OVER (
        PARTITION BY CustomerID 
        ORDER BY OrderDate
        ROWS BETWEEN 2 PRECEDING AND CURRENT ROW
    ) AS MenorUltimas3Vendas
FROM UltimasVendas
WHERE RankingVenda <= 5  -- √öltimas 5 vendas por cliente
ORDER BY CustomerID, OrderDate DESC;

-- =============================================
-- EXEMPLO 4: An√°lise de Pre√ßos - Compara√ß√£o Relativa
-- =============================================
-- Baseado no arquivo: 6.Porcentagem Relativa do preco atual com o proximo pre√ßo.sql

WITH ProdutosComPrecos AS (
    SELECT 
        P.ProductID,
        P.Name AS NomeProduto,
        PSC.Name AS Subcategoria,
        PC.Name AS Categoria,
        P.ListPrice,
        P.StandardCost
    FROM Production.Product P
    LEFT JOIN Production.ProductSubcategory PSC ON P.ProductSubcategoryID = PSC.ProductSubcategoryID
    LEFT JOIN Production.ProductCategory PC ON PSC.ProductCategoryID = PC.ProductCategoryID
    WHERE P.ListPrice > 0
)
SELECT 
    ProductID,
    NomeProduto,
    Categoria,
    Subcategoria,
    FORMAT(ListPrice, 'C', 'pt-BR') AS PrecoAtual,
    FORMAT(StandardCost, 'C', 'pt-BR') AS CustoAtual,
    
    -- Pre√ßo do produto anterior na mesma categoria
    LAG(ListPrice, 1) OVER (
        PARTITION BY Categoria 
        ORDER BY ListPrice
    ) AS PrecoAnterior,
    
    -- Pre√ßo do pr√≥ximo produto na mesma categoria
    LEAD(ListPrice, 1) OVER (
        PARTITION BY Categoria 
        ORDER BY ListPrice
    ) AS ProximoPreco,
    
    -- Percentual relativo com pre√ßo anterior
    CASE 
        WHEN LAG(ListPrice, 1) OVER (PARTITION BY Categoria ORDER BY ListPrice) > 0
        THEN ROUND(
            ((ListPrice - LAG(ListPrice, 1) OVER (PARTITION BY Categoria ORDER BY ListPrice)) * 100.0) / 
            LAG(ListPrice, 1) OVER (PARTITION BY Categoria ORDER BY ListPrice), 2
        )
        ELSE NULL
    END AS PercentualComAnterior,
    
    -- Percentual relativo com pr√≥ximo pre√ßo
    CASE 
        WHEN LEAD(ListPrice, 1) OVER (PARTITION BY Categoria ORDER BY ListPrice) > 0
        THEN ROUND(
            ((LEAD(ListPrice, 1) OVER (PARTITION BY Categoria ORDER BY ListPrice) - ListPrice) * 100.0) / 
            ListPrice, 2
        )
        ELSE NULL
    END AS PercentualComProximo,
    
    -- Posi√ß√£o do pre√ßo na categoria
    ROW_NUMBER() OVER (
        PARTITION BY Categoria 
        ORDER BY ListPrice
    ) AS PosicaoPreco,
    
    -- Primeiro e √∫ltimo pre√ßo da categoria
    FIRST_VALUE(ListPrice) OVER (
        PARTITION BY Categoria 
        ORDER BY ListPrice
        ROWS UNBOUNDED PRECEDING
    ) AS MenorPrecoDaCategoria,
    
    LAST_VALUE(ListPrice) OVER (
        PARTITION BY Categoria 
        ORDER BY ListPrice
        ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
    ) AS MaiorPrecoDaCategoria
FROM ProdutosComPrecos
WHERE Categoria IS NOT NULL
ORDER BY Categoria, ListPrice;

-- =============================================
-- EXEMPLO 5: An√°lise de Gaps em S√©ries Temporais
-- =============================================
-- Identifica√ß√£o de lacunas em dados temporais

WITH VendasDiarias AS (
    SELECT 
        CAST(OrderDate AS DATE) AS DataVenda,
        COUNT(*) AS QtdePedidos,
        SUM(TotalDue) AS TotalVendas
    FROM Sales.SalesOrderHeader
    WHERE OrderDate >= '2014-06-01' AND OrderDate < '2014-07-01'
    GROUP BY CAST(OrderDate AS DATE)
)
SELECT 
    DataVenda,
    QtdePedidos,
    FORMAT(TotalVendas, 'C', 'pt-BR') AS TotalVendas,
    
    -- Data da venda anterior
    LAG(DataVenda, 1) OVER (ORDER BY DataVenda) AS DataVendaAnterior,
    
    -- Dias entre vendas
    DATEDIFF(DAY, 
        LAG(DataVenda, 1) OVER (ORDER BY DataVenda), 
        DataVenda
    ) AS DiasEntreDatas,
    
    -- Identifica√ß√£o de gaps (mais de 1 dia)
    CASE 
        WHEN DATEDIFF(DAY, LAG(DataVenda, 1) OVER (ORDER BY DataVenda), DataVenda) > 1
        THEN '‚ö†Ô∏è Gap detectado'
        WHEN DATEDIFF(DAY, LAG(DataVenda, 1) OVER (ORDER BY DataVenda), DataVenda) = 1
        THEN '‚úÖ Sequencial'
        ELSE 'üÜï Primeiro registro'
    END AS StatusSequencia,
    
    -- Pr√≥xima data com vendas
    LEAD(DataVenda, 1) OVER (ORDER BY DataVenda) AS ProximaDataVenda
FROM VendasDiarias
ORDER BY DataVenda;

-- =============================================
-- EXERC√çCIOS PR√ÅTICOS
-- =============================================

-- Exerc√≠cio 1: Crie uma an√°lise de crescimento trimestral
-- usando LAG para comparar com trimestre anterior
-- TODO: Implemente aqui

-- Exerc√≠cio 2: Use FIRST_VALUE e LAST_VALUE para analisar
-- a performance de vendedores no primeiro e √∫ltimo m√™s do ano
-- TODO: Implemente aqui

-- Exerc√≠cio 3: Implemente uma an√°lise de sazonalidade
-- comparando cada m√™s com o mesmo m√™s dos anos anteriores
-- TODO: Implemente aqui