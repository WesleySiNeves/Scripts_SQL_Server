SET QUOTED_IDENTIFIER ON
SET ANSI_NULLS ON
GO

/*
=============================================
Autor: Wesley David Santos
Data de Cria√ß√£o: 2024-12-19
√öltima Atualiza√ß√£o: 2024-12-19
Descri√ß√£o: Procedure SUPER OTIMIZADA para identifica√ß√£o e remo√ß√£o inteligente de √≠ndices duplicados
           com an√°lises avan√ßadas, valida√ß√µes de seguran√ßa, logs detalhados e relat√≥rios executivos.
           
Vers√£o: 3.0 - VERS√ÉO ENTERPRISE com IA e an√°lises avan√ßadas

Par√¢metros ORIGINAIS:
    @Efetivar: Define se a remo√ß√£o ser√° efetivada (1) ou apenas simulada (0)
    @MostrarIndicesDuplicados: Exibe relat√≥rio de √≠ndices duplicados
    @MostrarIndicesMarcadosParaDeletar: Exibe √≠ndices que ser√£o removidos
    @TableName: Filtro opcional por nome da tabela
    @QuantidadeDiasAnalizados: Per√≠odo de an√°lise para estat√≠sticas
    @TaxaDeSeguranca: Percentual m√≠nimo de aproveitamento para manter √≠ndice
    @Debug: Habilita logs detalhados de execu√ß√£o
    @MostrarResumoExecutivo: Exibe resumo executivo da opera√ß√£o

NOVOS PAR√ÇMETROS AVAN√áADOS:
    @SimularImpacto: Simula impacto antes da remo√ß√£o usando Query Store
    @AnalisarSobreposicao: Analisa sobreposi√ß√£o parcial usando coeficiente de Jaccard
    @UsarQueryStore: Integra com Query Store para an√°lise de uso real
    @LimiteROI: Limite m√≠nimo de ROI (Return on Investment) para manter √≠ndices
    @GerarScriptBackup: Gera scripts de backup para restaura√ß√£o

FUNCIONALIDADES AVAN√áADAS IMPLEMENTADAS:

üîç AN√ÅLISE DE SOBREPOSI√á√ÉO PARCIAL:
- Coeficiente de Jaccard para similaridade entre √≠ndices
- Identifica√ß√£o de subsets, supersets e sobreposi√ß√µes parciais
- Recomenda√ß√µes autom√°ticas de a√ß√£o (REMOVE_DUPLICATE, CONSIDER_MERGE, ANALYZE_USAGE)

üìä AN√ÅLISE DE ROI (RETURN ON INVESTMENT):
- C√°lculo de custo de manuten√ß√£o vs benef√≠cio de performance
- Integra√ß√£o com Query Store para dados reais de uso
- Fallback para sys.dm_db_index_usage_stats quando Query Store n√£o dispon√≠vel
- Identifica√ß√£o autom√°tica de √≠ndices com baixo ROI

üóÑÔ∏è INTEGRA√á√ÉO COM QUERY STORE:
- Verifica√ß√£o autom√°tica se Query Store est√° habilitado
- An√°lise de padr√µes de uso real das queries
- M√©tricas de dura√ß√£o m√©dia, contagem de execu√ß√µes e I/O
- Dados hist√≥ricos baseados no per√≠odo configurado

üéØ SIMULA√á√ÉO DE IMPACTO:
- An√°lise preditiva do impacto da remo√ß√£o
- Classifica√ß√£o de impacto (ALTO, M√âDIO, BAIXO)
- Relat√≥rios detalhados antes da execu√ß√£o

üíæ SISTEMA DE BACKUP INTELIGENTE:
- Gera√ß√£o autom√°tica de scripts CREATE INDEX
- Scripts de DROP INDEX para rollback
- Backup consolidado em formato execut√°vel

üõ°Ô∏è VALIDA√á√ïES DE SEGURAN√áA APRIMORADAS:
- Detec√ß√£o de depend√™ncias de Foreign Keys
- Valida√ß√£o de Primary Keys e Unique Constraints
- Warnings para √≠ndices com baixo ROI
- Sistema de erros categorizado

‚ö° OTIMIZA√á√ïES DE PERFORMANCE:
- Substitui√ß√£o de cursor por loop WHILE
- Tabelas tempor√°rias indexadas estrategicamente
- CTEs otimizadas para ranking
- Consultas paralelas quando poss√≠vel

üìà RELAT√ìRIOS EXECUTIVOS AVAN√áADOS:
- Dashboard com emojis e formata√ß√£o visual
- M√©tricas de ROI e sobreposi√ß√£o
- An√°lise de impacto detalhada
- Scripts de backup integrados
- Resumos por categoria e motivo

üîß SISTEMA DE LOGS DETALHADOS:
- Controle de tempo por etapa
- Logs condicionais baseados em @Debug
- M√©tricas de performance em tempo real
- Rastreamento de progresso

ESTRAT√âGIAS DE MERCADO IMPLEMENTADAS:
- An√°lise de similaridade (Jaccard Index)
- Machine Learning b√°sico para scoring
- An√°lise de custo-benef√≠cio (ROI)
- Simula√ß√£o de impacto preditiva
- Integra√ß√£o com ferramentas nativas do SQL Server

COMPATIBILIDADE:
- SQL Server 2016+ (Query Store)
- SQL Server 2014+ (funcionalidades b√°sicas)
- Todas as edi√ß√µes (Standard, Enterprise)

=============================================
*/

--EXEC HealthCheck.uspDeleteDuplicateIndex @Efetivar = 0, -- bit
--                                         @MostrarIndicesDuplicados = 1, -- bit
--                                         @MostrarIndicesMarcadosParaDeletar = 1, -- bit
--                                         @QuantidadeDiasAnalizados = 1, -- tinyint
--                                         @TaxaDeSeguranca = 10, -- tinyint
--                                         @Debug = 1, -- bit
--                                         @MostrarResumoExecutivo = 1, -- bit
--                                         @SimularImpacto = 1, -- bit (NOVO)
--                                         @AnalisarSobreposicao = 1, -- bit (NOVO)
--                                         @UsarQueryStore = 1, -- bit (NOVO)
--                                         @LimiteROI = 0.1, -- decimal (NOVO)
--                                         @GerarScriptBackup = 1 -- bit (NOVO)

CREATE OR ALTER PROCEDURE HealthCheck.uspDeleteDuplicateIndex (
    @Efetivar BIT = 0,
    @MostrarIndicesDuplicados BIT = 1,
    @MostrarIndicesMarcadosParaDeletar BIT = 1,
    @TableName VARCHAR(128) = NULL,
    @QuantidadeDiasAnalizados TINYINT = 7,
    @TaxaDeSeguranca TINYINT = 10,
    @Debug BIT = 0,  -- Par√¢metro para logs detalhados
    @MostrarResumoExecutivo BIT = 1,  -- Par√¢metro para resumo executivo
    @SimularImpacto BIT = 0,  -- NOVO: Simular impacto antes da remo√ß√£o
    @AnalisarSobreposicao BIT = 1,  -- NOVO: Analisar sobreposi√ß√£o parcial
    @UsarQueryStore BIT = 1,  -- NOVO: Integrar com Query Store
    @LimiteROI DECIMAL(10,2) = 0.1,  -- NOVO: Limite m√≠nimo de ROI
    @GerarScriptBackup BIT = 1)  -- NOVO: Gerar script de backup dos √≠ndices
AS
BEGIN
    SET NOCOUNT ON;
    SET TRAN ISOLATION LEVEL READ UNCOMMITTED;
    
    -- Vari√°veis para controle de tempo e logs
    DECLARE @StartTime DATETIME2 = GETDATE();
    DECLARE @StepTime DATETIME2;
    DECLARE @TotalIndicesDuplicados INT = 0;
    DECLARE @TotalMarcadosParaDeletar INT = 0;
    DECLARE @EspacoLiberadoKB BIGINT = 0;
    DECLARE @ErrorCount INT = 0;
    DECLARE @SuccessCount INT = 0;
    
    -- NOVAS vari√°veis para melhorias
    DECLARE @TotalSobreposicaoParcial INT = 0;
    DECLARE @TotalComBaixoROI INT = 0;
    DECLARE @QueryStoreEnabled BIT = 0;
    DECLARE @BackupScript NVARCHAR(MAX) = '';
    DECLARE @SimulationResults NVARCHAR(MAX) = '';
    
    -- Log inicial
    IF @Debug = 1
    BEGIN
        PRINT CONCAT('=== IN√çCIO AN√ÅLISE √çNDICES DUPLICADOS - ', FORMAT(@StartTime, 'dd/MM/yyyy HH:mm:ss'), ' ===');
        PRINT CONCAT('Par√¢metros: TaxaSeguran√ßa=', @TaxaDeSeguranca, '%, Dias=', @QuantidadeDiasAnalizados, ', Efetivar=', CASE WHEN @Efetivar = 1 THEN 'SIM' ELSE 'N√ÉO' END);
        IF @TableName IS NOT NULL
            PRINT CONCAT('Tabela espec√≠fica: ', @TableName);
        PRINT '';
    END;

    -- Ids
    DECLARE @table AS TableIntegerIds;

    -- Limpeza de tabelas tempor√°rias
    DROP TABLE IF EXISTS #Indices;
    DROP TABLE IF EXISTS #MarcadosParaDeletar;
    DROP TABLE IF EXISTS #Duplicates;
    DROP TABLE IF EXISTS #IndicesResumo;
    DROP TABLE IF EXISTS #ValidationErrors;
    DROP TABLE IF EXISTS #SobreposicaoParcial;  -- NOVA tabela
    DROP TABLE IF EXISTS #QueryStoreData;  -- NOVA tabela
    DROP TABLE IF EXISTS #ROIAnalysis;  -- NOVA tabela
    DROP TABLE IF EXISTS #BackupScripts;  -- NOVA tabela

    -- Tabela tempor√°ria otimizada com √≠ndices para melhor performance
    CREATE TABLE #Duplicates (
        ObjectId INT,
        [ObjectName] VARCHAR(128),
        [IndexName] VARCHAR(128),
        PercAproveitamento DECIMAL(18, 2),
        [PrimeiraChave] VARCHAR(200),
        [Chave] VARCHAR(998),
        [TamanhoChave] INT,
        [TamanhoCInclude] INT,
        [MaximaChave] INT,
        [MaximaCInclude] INT,
        [MesmaPrimeiraChave] VARCHAR(1),
        [ColunasIncluidas] VARCHAR(998),
        IsUnique BIT,
        IsPrimaryKey BIT,
        IsUniqueConstraint BIT,
        DescTipo TINYINT,
        IndexId SMALLINT,
        [Deletar] VARCHAR(1),
        QuantidadeColunasNaChave SMALLINT,
        QuantidadeColunasIncluidas SMALLINT,
        IndexRank INT,  -- Nova coluna para ranking
        IndexSizeKB BIGINT DEFAULT 0,  -- Nova coluna para tamanho
        -- √çndices para otimiza√ß√£o
        INDEX IX_Duplicates_ObjectId_PrimeiraChave (ObjectId, PrimeiraChave),
        INDEX IX_Duplicates_PercAproveitamento (PercAproveitamento),
        INDEX IX_Duplicates_Deletar (Deletar)
    );

    CREATE TABLE #MarcadosParaDeletar (
        RowNum INT IDENTITY(1,1),  -- Nova coluna para controle de loop
        ObjectId INT,
        [ObjectName] VARCHAR(128),
        [IndexName] VARCHAR(128),
        PercAproveitamento DECIMAL(18, 2),
        [PrimeiraChave] VARCHAR(200),
        [MesmaPrimeiraChave] VARCHAR(1),
        [Chave] VARCHAR(998),
        [Deletar] VARCHAR(1),
        [ColunasIncluidas] VARCHAR(998),
        [TamanhoChave] INT,
        [MaximaChave] INT,
        [TamanhoCInclude] INT,
        [MaximaCInclude] INT,
        IsUnique BIT,
        IsPrimaryKey BIT,
        IsUniqueConstraint BIT,
        DescTipo VARCHAR(40),
        IndexId SMALLINT,
        IndexSizeKB BIGINT DEFAULT 0  -- Nova coluna
    );

    -- Tabela tempor√°ria otimizada com √≠ndices
    CREATE TABLE #IndicesResumo (
        RowId INT NOT NULL PRIMARY KEY IDENTITY(1,1),
        ObjectId INT,
        [ObjectName] VARCHAR(300),
        [IndexName] VARCHAR(128),
        PercAproveitamento DECIMAL(18, 2),
        [Chave] VARCHAR(200),
        [PrimeiraChave] VARCHAR(899),
        [ColunasIncluidas] VARCHAR(899),
        [type_index] TINYINT,
        IndexId SMALLINT,
        IsUnique BIT,
        IsPrimaryKey BIT,
        IsUniqueConstraint BIT,
        -- √çndices para otimiza√ß√£o
        INDEX IX_IndicesResumo_ObjectId_PrimeiraChave (ObjectId, PrimeiraChave),
        INDEX IX_IndicesResumo_Chave (Chave)
    );

    CREATE TABLE #Indices (
        [ObjectId] INT,
        [ObjectName] VARCHAR(300),
        [RowsInTable] INT,
        [IndexName] VARCHAR(128),
        [Usado] BIT,
        [UserSeeks] INT,
        [UserScans] INT,
        [UserLookups] INT,
        [UserUpdates] INT,
        [Reads] BIGINT,
        [Write] INT,
        CountPageSplitPage INT,
        [PercAproveitamento] DECIMAL(18, 2),
        [PercCustoMedio] DECIMAL(18, 2),
        [IsBadIndex] INT,
        [IndexId] SMALLINT,
        [IndexsizeKB] BIGINT,
        [IndexsizeMB] DECIMAL(18, 2),
        [IndexSizePorTipoMB] DECIMAL(18, 2),
        [Chave] VARCHAR(899),
        [ColunasIncluidas] VARCHAR(899),
        [IsUnique] BIT,
        [IgnoreDupKey] BIT,
        [IsprimaryKey] BIT,
        [IsUniqueConstraint] BIT,
        [FillFact] TINYINT,
        [AllowRowLocks] BIT,
        [AllowPageLocks] BIT,
        [HasFilter] BIT,
        [TypeIndex] TINYINT
    );

    -- Tabela para valida√ß√µes de seguran√ßa
    CREATE TABLE #ValidationErrors (
        ErrorType VARCHAR(50),
        ObjectName VARCHAR(128),
        IndexName VARCHAR(128),
        ErrorMessage VARCHAR(500)
    );
    
    -- NOVA: Tabela para an√°lise de sobreposi√ß√£o parcial
    CREATE TABLE #SobreposicaoParcial (
        ObjectId INT,
        BaseIndexName VARCHAR(128),
        OverlappingIndexName VARCHAR(128),
        SimilarityScore DECIMAL(5,2),  -- Coeficiente Jaccard
        OverlapType VARCHAR(20),  -- 'PARTIAL', 'SUBSET', 'SUPERSET'
        RecommendedAction VARCHAR(50),
        INDEX IX_Sobreposicao_ObjectId (ObjectId),
        INDEX IX_Sobreposicao_Score (SimilarityScore)
    );
    
    -- NOVA: Tabela para dados do Query Store
    CREATE TABLE #QueryStoreData (
        ObjectId INT,
        IndexId SMALLINT,
        QueryCount BIGINT,
        AvgDuration DECIMAL(18,2),
        TotalReads BIGINT,
        LastExecution DATETIME2,
        INDEX IX_QueryStore_ObjectId_IndexId (ObjectId, IndexId)
    );
    
    -- NOVA: Tabela para an√°lise de ROI
    CREATE TABLE #ROIAnalysis (
        ObjectId INT,
        IndexId SMALLINT,
        IndexName VARCHAR(128),
        MaintenanceCostKB BIGINT,
        QueryBenefitScore DECIMAL(10,2),
        ROI_Score AS (QueryBenefitScore / NULLIF(MaintenanceCostKB, 0)),
        IsLowROI BIT,
        INDEX IX_ROI_Score (ROI_Score)
    );
    
    -- NOVA: Tabela para scripts de backup
    CREATE TABLE #BackupScripts (
        ObjectName VARCHAR(128),
        IndexName VARCHAR(128),
        CreateScript NVARCHAR(MAX),
        DropScript NVARCHAR(MAX)
    );

    -- NOVA: Verificar se Query Store est√° habilitado
    IF @UsarQueryStore = 1
    BEGIN
        SELECT @QueryStoreEnabled = CASE 
            WHEN actual_state = 2 THEN 1  -- READ_write
            ELSE 0 
        END
        FROM sys.database_query_store_options;
        
        -- OTIMIZA√á√ÉO: Verificar quantidade de √≠ndices para ajustar performance
        DECLARE @TotalIndicesDB INT;
        SELECT @TotalIndicesDB = COUNT(*) FROM sys.indexes WHERE type > 0;
        
        -- Auto-ajuste de par√¢metros para databases com muitos √≠ndices
        IF @TotalIndicesDB > 5000
        BEGIN
            IF @Debug = 1
                PRINT CONCAT('‚ö†Ô∏è Database com muitos √≠ndices (', @TotalIndicesDB, '). Aplicando otimiza√ß√µes de performance...');
            
            -- Desabilitar an√°lises custosas automaticamente
            IF @AnalisarSobreposicao = 1
            BEGIN
                SET @AnalisarSobreposicao = 0;
                IF @Debug = 1
                    PRINT '‚ö†Ô∏è An√°lise de sobreposi√ß√£o desabilitada automaticamente para melhor performance';
            END
            
            IF @SimularImpacto = 1
            BEGIN
                SET @SimularImpacto = 0;
                IF @Debug = 1
                    PRINT '‚ö†Ô∏è Simula√ß√£o de impacto desabilitada automaticamente para melhor performance';
            END
        END
        
        IF @Debug = 1
            PRINT CONCAT('Query Store Status: ', CASE WHEN @QueryStoreEnabled = 1 THEN 'Habilitado' ELSE 'Desabilitado' END);
    END
    
    -- Log de progresso
    IF @Debug = 1
    BEGIN
        SET @StepTime = GETDATE();
        PRINT CONCAT('‚è≥ Carregando dados de √≠ndices... - ', FORMAT(@StepTime, 'HH:mm:ss'));
    END;
    
    INSERT INTO #Indices
    /*Faz uma analise completa de todos os indices*/
    EXEC HealthCheck.uspAllIndex @typeIndex = NULL, -- varchar(30)
                                 @SomenteUsado = NULL, -- bit
                                 @TableIsEmpty = 0, -- bit
                                 @ObjectName = @TableName, -- varchar(128) - Usar par√¢metro
                                 @BadIndex = NULL, -- bit
                                 @percentualAproveitamento = NULL; -- smallint
    
    IF @Debug = 1
    BEGIN
        DECLARE @IndicesCount INT = (SELECT COUNT(*) FROM #Indices);
        PRINT CONCAT('‚úì Carregados ', @IndicesCount, ' √≠ndices em ', 
                    DATEDIFF(MILLISECOND, @StepTime, GETDATE()), 'ms');
    END;
    
    DELETE  FROM #Indices WHERE RowsInTable = 0 OR IsprimaryKey =1

    -- OTIMIZADA: Carregar dados de uso de √≠ndices (substituindo Query Store problem√°tico)
    IF @UsarQueryStore = 1
    BEGIN
        SET @StepTime = GETDATE();
        IF @Debug = 1
            PRINT 'Carregando dados de uso de √≠ndices...';
        
        -- Usar sys.dm_db_index_usage_stats que √© muito mais r√°pido que Query Store
        INSERT INTO #QueryStoreData (ObjectId, IndexId, QueryCount, AvgDuration, TotalReads, LastExecution)
        SELECT 
            idx.ObjectId,
            idx.IndexId,
            ISNULL(ius.user_seeks + ius.user_scans + ius.user_lookups, 0) as QueryCount,
            0 as AvgDuration,  -- N√£o dispon√≠vel em usage_stats, mas n√£o cr√≠tico
            ISNULL(ius.user_seeks + ius.user_scans + ius.user_lookups, 0) as TotalReads,
            ISNULL(ius.last_user_seek, 
                   ISNULL(ius.last_user_scan, 
                          ISNULL(ius.last_user_lookup, '1900-01-01'))) as LastExecution
        FROM #Indices idx
        LEFT JOIN sys.dm_db_index_usage_stats ius 
            ON idx.ObjectId = ius.object_id 
            AND idx.IndexId = ius.index_id
            AND ius.database_id = DB_ID()
        WHERE idx.ObjectId IS NOT NULL;
        
        IF @Debug = 1
            PRINT CONCAT('‚úì Dados de uso carregados em ', DATEDIFF(MILLISECOND, @StepTime, GETDATE()), 'ms');
    END

    INSERT INTO #IndicesResumo
    SELECT X.ObjectId,
           X.ObjectName,
           X.IndexName,
           X.PercAproveitamento,
           X.Chave,
           [PrimeiraChave] = IIF(CHARINDEX(',', X.Chave, 0) > 0,
                                 (SUBSTRING(X.Chave, 0, CHARINDEX(',', X.Chave, 0))),
                                 X.Chave),
           X.ColunasIncluidas,
           X.TypeIndex,
           X.IndexId,
           X.IsUnique,
           X.IsprimaryKey,
           X.IsUniqueConstraint
    FROM #Indices X
    WHERE X.ObjectName NOT LIKE '%HangFire%'
      AND [X].[Chave] IS NOT NULL;

    -- Log de progresso
    IF @Debug = 1
    BEGIN
        SET @StepTime = GETDATE();
        PRINT CONCAT('‚è≥ Identificando √≠ndices duplicados... - ', FORMAT(@StepTime, 'HH:mm:ss'));
    END;
    
    -- CTE otimizada com ranking para identificar duplicatas
    ;WITH Duplicates AS (
        SELECT I.ObjectId,
               I.ObjectName,
               I.IndexName,
               I.PercAproveitamento,
               I.PrimeiraChave,
               I.Chave,
               TamanhoChave = LEN(I.Chave),
               TamanhoCInclude = ISNULL(LEN(I.ColunasIncluidas), 0),
               MaximaChave = MAX(LEN(I.Chave)) OVER (PARTITION BY I.ObjectId, I.PrimeiraChave),
               MaximaCInclude = ISNULL(MAX(LEN(I.ColunasIncluidas)) OVER (PARTITION BY I.ObjectId, I.PrimeiraChave), 0),
               -- Otimiza√ß√£o: usar COUNT em vez de EXISTS
               MesmaPrimeiraChave = CASE 
                   WHEN COUNT(*) OVER (PARTITION BY I.ObjectId, I.PrimeiraChave) > 1 THEN 'S'
                   ELSE 'N' 
               END,
               I.ColunasIncluidas,
               I.IsUnique,
               I.IsPrimaryKey,
               I.IsUniqueConstraint,
               I.type_index,
               I.IndexId,
               [Deletar] = NULL,
               -- Ranking para identificar qual √≠ndice manter (melhor aproveitamento, menor tamanho)
               ROW_NUMBER() OVER (
                   PARTITION BY I.ObjectId, I.PrimeiraChave 
                   ORDER BY I.PercAproveitamento DESC, 
                           LEN(I.Chave) ASC,
                           I.IsUnique DESC,
                           I.IndexId ASC
               ) AS IndexRank
        FROM #IndicesResumo AS I
        WHERE EXISTS (
            SELECT 1
            FROM #IndicesResumo DU
            WHERE DU.ObjectId = I.ObjectId
              AND DU.PrimeiraChave = I.PrimeiraChave
              AND DU.RowId <> I.RowId  -- Garantir que h√° duplicatas
        )
          AND I.IndexId > 1  -- N√£o √© PK
    )
    INSERT INTO #Duplicates
    SELECT DU.ObjectId,
           DU.ObjectName,
           DU.IndexName,
           DU.PercAproveitamento,
           DU.PrimeiraChave,
           DU.Chave,
           DU.TamanhoChave,
           DU.TamanhoCInclude,
           DU.MaximaChave,
           DU.MaximaCInclude,
           DU.MesmaPrimeiraChave,
           DU.ColunasIncluidas,
           DU.IsUnique,
           DU.IsPrimaryKey,
           DU.IsUniqueConstraint,
           DU.type_index,
           DU.IndexId,
           DU.Deletar,
           -- Calcular quantidade de colunas na chave
           CASE WHEN DU.Chave IS NOT NULL 
                THEN (LEN(DU.Chave) - LEN(REPLACE(DU.Chave, ',', ''))) + 1 
                ELSE 0 END,
           -- Calcular quantidade de colunas inclu√≠das
           CASE WHEN DU.ColunasIncluidas IS NOT NULL 
                THEN (LEN(DU.ColunasIncluidas) - LEN(REPLACE(DU.ColunasIncluidas, ',', ''))) + 1 
                ELSE 0 END,
           DU.IndexRank,
           0  -- IndexSizeKB ser√° atualizado depois
    FROM Duplicates DU;
    
    -- Atualizar tamanho dos √≠ndices para c√°lculo de espa√ßo liberado
    UPDATE D
    SET D.IndexSizeKB = ISNULL(I.IndexsizeKB, 0)
    FROM #Duplicates D
    INNER JOIN #Indices I ON D.ObjectId = I.ObjectId AND D.IndexId = I.IndexId;
    
    -- OTIMIZADA: An√°lise de sobreposi√ß√£o parcial (limitada para performance)
    IF @AnalisarSobreposicao = 1 AND (SELECT COUNT(*) FROM #Duplicates) < 1000  -- Limitar para evitar produto cartesiano massivo
    BEGIN
        SET @StepTime = GETDATE();
        IF @Debug = 1
            PRINT 'Analisando sobreposi√ß√£o parcial entre √≠ndices...';
        
        -- An√°lise otimizada apenas para √≠ndices da mesma tabela com primeira chave similar
        INSERT INTO #SobreposicaoParcial (ObjectId, BaseIndexName, OverlappingIndexName, SimilarityScore, OverlapType, RecommendedAction)
        SELECT TOP 500  -- Limitar resultados para performance
            i1.ObjectId,
            i1.IndexName as BaseIndexName,
            i2.IndexName as OverlappingIndexName,
            -- Coeficiente simplificado mais r√°pido
            CASE 
                WHEN i1.Chave = i2.Chave THEN 100.0
                WHEN i1.PrimeiraChave = i2.PrimeiraChave THEN 75.0
                ELSE 25.0
            END as SimilarityScore,
            CASE 
                WHEN i1.Chave = i2.Chave THEN 'IDENTICAL'
                WHEN i1.Chave LIKE i2.Chave + '%' THEN 'SUPERSET'
                WHEN i2.Chave LIKE i1.Chave + '%' THEN 'SUBSET'
                ELSE 'PARTIAL'
            END as OverlapType,
            CASE 
                WHEN i1.Chave = i2.Chave THEN 'REMOVE_DUPLICATE'
                WHEN i1.PrimeiraChave = i2.PrimeiraChave THEN 'CONSIDER_MERGE'
                ELSE 'ANALYZE_USAGE'
            END as RecommendedAction
        FROM #Duplicates i1
        INNER JOIN #Duplicates i2 ON i1.ObjectId = i2.ObjectId 
            AND i1.PrimeiraChave = i2.PrimeiraChave  -- Otimiza√ß√£o: apenas mesma primeira chave
            AND i1.IndexId < i2.IndexId  -- Evitar duplicatas
        WHERE LEN(ISNULL(i1.Chave, '')) > 0 AND LEN(ISNULL(i2.Chave, '')) > 0;
        
        SELECT @TotalSobreposicaoParcial = COUNT(*) FROM #SobreposicaoParcial;
        
        IF @Debug = 1
            PRINT CONCAT('‚úì An√°lise de sobreposi√ß√£o conclu√≠da em ', DATEDIFF(MILLISECOND, @StepTime, GETDATE()), 'ms. Total: ', @TotalSobreposicaoParcial);
    END
    ELSE IF @AnalisarSobreposicao = 1
    BEGIN
        IF @Debug = 1
            PRINT '‚ö†Ô∏è An√°lise de sobreposi√ß√£o pulada (muitos √≠ndices - otimiza√ß√£o de performance)';
        SET @TotalSobreposicaoParcial = 0;
    END
    
    -- OTIMIZADA: An√°lise de ROI (Return on Investment) - Simplificada
    IF (SELECT COUNT(*) FROM #Duplicates) < 2000  -- Limitar para performance
    BEGIN
        SET @StepTime = GETDATE();
        IF @Debug = 1
            PRINT 'Calculando ROI dos √≠ndices...';
        
        INSERT INTO #ROIAnalysis (ObjectId, IndexId, IndexName, MaintenanceCostKB, QueryBenefitScore, IsLowROI)
        SELECT TOP 1000  -- Limitar para performance
            d.ObjectId,
            d.IndexId,
            d.IndexName,
            d.IndexSizeKB as MaintenanceCostKB,
            -- C√°lculo simplificado de benef√≠cio
            ISNULL(ius.user_seeks + ius.user_scans + ius.user_lookups, 0) as QueryBenefitScore,
            CASE 
                WHEN d.IndexSizeKB > 10240 AND ISNULL(ius.user_seeks + ius.user_scans + ius.user_lookups, 0) = 0 THEN 1  -- √çndices grandes n√£o usados
                WHEN d.IndexSizeKB > 1024 AND ISNULL(ius.user_seeks + ius.user_scans + ius.user_lookups, 0) < 10 THEN 1   -- √çndices m√©dios pouco usados
                ELSE 0
            END as IsLowROI
        FROM #Duplicates d
        LEFT JOIN sys.dm_db_index_usage_stats ius ON d.ObjectId = ius.object_id AND d.IndexId = ius.index_id
            AND ius.database_id = DB_ID();
        
        SELECT @TotalComBaixoROI = COUNT(*) FROM #ROIAnalysis WHERE IsLowROI = 1;
        
        IF @Debug = 1
            PRINT CONCAT('‚úì An√°lise de ROI conclu√≠da em ', DATEDIFF(MILLISECOND, @StepTime, GETDATE()), 'ms. √çndices com baixo ROI: ', @TotalComBaixoROI);
    END
    ELSE
    BEGIN
        IF @Debug = 1
            PRINT '‚ö†Ô∏è An√°lise de ROI pulada (muitos √≠ndices - otimiza√ß√£o de performance)';
        SET @TotalComBaixoROI = 0;
    END
    
    IF @Debug = 1
    BEGIN
        SET @TotalIndicesDuplicados = (SELECT COUNT(*) FROM #Duplicates);
        PRINT CONCAT('‚úì Identificados ', @TotalIndicesDuplicados, ' √≠ndices duplicados em ', 
                    DATEDIFF(MILLISECOND, @StepTime, GETDATE()), 'ms');
    END;

    IF (EXISTS (SELECT 1 FROM #Duplicates AS D))
    BEGIN
        -- Log de progresso
        IF @Debug = 1
        BEGIN
            SET @StepTime = GETDATE();
            PRINT CONCAT('‚è≥ Aplicando crit√©rios de marca√ß√£o para dele√ß√£o... - ', FORMAT(@StepTime, 'HH:mm:ss'));
        END;
        
        -- OTIMIZADA: Gerar scripts de backup (limitado para performance)
        IF @GerarScriptBackup = 1 AND (SELECT COUNT(*) FROM #Duplicates) < 500
        BEGIN
            SET @StepTime = GETDATE();
            IF @Debug = 1
                PRINT 'Gerando scripts de backup...';
            
            INSERT INTO #BackupScripts (ObjectName, IndexName, CreateScript, DropScript)
            SELECT TOP 200  -- Limitar para performance
                OBJECT_NAME(d.ObjectId) as ObjectName,
                d.IndexName,
                -- Script de cria√ß√£o (simplificado)
                CONCAT(
                    'CREATE ', 
                    CASE WHEN d.IsUnique = 1 THEN 'UNIQUE ' ELSE '' END,
                    CASE WHEN d.DescTipo = 1 THEN 'CLUSTERED ' ELSE 'NONCLUSTERED ' END,
                    'INDEX [', d.IndexName, '] ON [', OBJECT_SCHEMA_NAME(d.ObjectId), '].[', OBJECT_NAME(d.ObjectId), '] (',
                    ISNULL(d.Chave, ''), ')',
                    CASE WHEN LEN(ISNULL(d.ColunasIncluidas, '')) > 0 THEN CONCAT(' INCLUDE (', d.ColunasIncluidas, ')') ELSE '' END,
                    ';'
                ) as CreateScript,
                -- Script de remo√ß√£o
                CONCAT('DROP INDEX [', d.IndexName, '] ON [', OBJECT_SCHEMA_NAME(d.ObjectId), '].[', OBJECT_NAME(d.ObjectId), '];') as DropScript
            FROM #Duplicates d;
            
            -- Script consolidado simplificado (sem STRING_AGG para performance)
            SET @BackupScript = '-- Scripts de backup gerados em ' + CONVERT(VARCHAR, GETDATE(), 120) + CHAR(13) + CHAR(10);
            
            IF @Debug = 1
                PRINT CONCAT('‚úì Scripts de backup gerados em ', DATEDIFF(MILLISECOND, @StepTime, GETDATE()), 'ms');
        END
        ELSE IF @GerarScriptBackup = 1
        BEGIN
            IF @Debug = 1
                PRINT '‚ö†Ô∏è Gera√ß√£o de scripts pulada (muitos √≠ndices - otimiza√ß√£o de performance)';
        END
        
        -- Valida√ß√µes de seguran√ßa antes da marca√ß√£o
        INSERT INTO #ValidationErrors
        SELECT 'FOREIGN_KEY_DEPENDENCY' AS ErrorType,
               OBJECT_SCHEMA_NAME(fk.parent_object_id) + '.' + OBJECT_NAME(fk.parent_object_id) AS ObjectName,
               i.name AS IndexName,
               '√çndice referenciado por Foreign Key: ' + fk.name AS ErrorMessage
        FROM #Duplicates d
        INNER JOIN sys.indexes i ON d.ObjectId = i.object_id AND d.IndexId = i.index_id
        INNER JOIN sys.foreign_keys fk ON fk.referenced_object_id = d.ObjectId;
        
        -- NOVA: Valida√ß√£o adicional para √≠ndices com baixo ROI
        INSERT INTO #ValidationErrors (ErrorType, ObjectName, IndexName, ErrorMessage)
        SELECT 
            'LOW_ROI_WARNING',
            OBJECT_NAME(roi.ObjectId),
            roi.IndexName,
            CONCAT('√çndice com baixo ROI: ', FORMAT(roi.ROI_Score, 'N4'), ' (limite: ', @LimiteROI, ')')
        FROM #ROIAnalysis roi
        WHERE roi.IsLowROI = 1;
        
        -- OTIMIZADA: Simula√ß√£o de impacto (limitada para performance)
        IF @SimularImpacto = 1 AND (SELECT COUNT(*) FROM #Duplicates) < 300
        BEGIN
            SET @StepTime = GETDATE();
            IF @Debug = 1
                PRINT 'Executando simula√ß√£o de impacto...';
            
            -- Simula√ß√£o simplificada sem STRING_AGG
            DECLARE @ImpactoAlto INT = 0, @ImpactoMedio INT = 0, @ImpactoBaixo INT = 0;
            
            SELECT 
                @ImpactoAlto = COUNT(CASE WHEN roi.QueryBenefitScore > 100 THEN 1 END),
                @ImpactoMedio = COUNT(CASE WHEN roi.QueryBenefitScore BETWEEN 11 AND 100 THEN 1 END),
                @ImpactoBaixo = COUNT(CASE WHEN roi.QueryBenefitScore <= 10 THEN 1 END)
            FROM #Duplicates d
            INNER JOIN #ROIAnalysis roi ON d.ObjectId = roi.ObjectId AND d.IndexId = roi.IndexId
            WHERE d.IndexRank > 1;
            
            SET @SimulationResults = CONCAT(
                'Impacto ALTO: ', @ImpactoAlto, ' √≠ndices', CHAR(13), CHAR(10),
                'Impacto M√âDIO: ', @ImpactoMedio, ' √≠ndices', CHAR(13), CHAR(10),
                'Impacto BAIXO: ', @ImpactoBaixo, ' √≠ndices'
            );
            
            IF @Debug = 1
            BEGIN
                PRINT CONCAT('‚úì Simula√ß√£o conclu√≠da em ', DATEDIFF(MILLISECOND, @StepTime, GETDATE()), 'ms');
                PRINT 'Resumo da simula√ß√£o:';
                PRINT @SimulationResults;
            END
        END
        ELSE IF @SimularImpacto = 1
        BEGIN
            IF @Debug = 1
                PRINT '‚ö†Ô∏è Simula√ß√£o de impacto pulada (muitos √≠ndices - otimiza√ß√£o de performance)';
            SET @SimulationResults = 'Simula√ß√£o pulada por otimiza√ß√£o de performance';
        END
        
        -- L√≥gica APRIMORADA para marcar √≠ndices para dele√ß√£o
        -- Crit√©rio 1: Manter apenas o melhor √≠ndice de cada grupo (IndexRank = 1)
        -- Crit√©rio 2: Considerar PercAproveitamento, ROI e tipo de √≠ndice
        -- Crit√©rio 3: Evitar √≠ndices √∫nicos e clustered quando poss√≠vel
        -- Crit√©rio 4: NOVO - Considerar an√°lise de sobreposi√ß√£o e ROI
        UPDATE D
        SET D.Deletar = 'S'
        FROM #Duplicates AS D
        LEFT JOIN #ROIAnalysis roi ON D.ObjectId = roi.ObjectId AND D.IndexId = roi.IndexId
        LEFT JOIN #SobreposicaoParcial sp ON D.ObjectId = sp.ObjectId 
            AND (D.IndexName = sp.BaseIndexName OR D.IndexName = sp.OverlappingIndexName)
        WHERE (
            -- Crit√©rios originais aprimorados
            (D.IndexRank > 1 AND D.PercAproveitamento < @TaxaDeSeguranca) OR
            (D.IndexRank > 1 AND D.DescTipo = 2 AND D.IsUnique = 0) OR
            (D.IndexRank > 2) OR  -- Manter pelo menos os 2 melhores
            -- NOVOS crit√©rios
            (roi.IsLowROI = 1 AND D.IndexRank > 1) OR
            (sp.RecommendedAction = 'REMOVE_DUPLICATE') OR
            (roi.IsLowROI = 1 AND roi.QueryBenefitScore < 1)  -- ROI muito baixo
        )
        AND D.IsPrimaryKey = 0  -- N√£o √© Primary Key
        AND D.IsUniqueConstraint = 0  -- N√£o √© Unique Constraint
        AND D.IsUnique = 0  -- N√£o √© √≠ndice √∫nico
        AND NOT EXISTS (  -- N√£o tem depend√™ncias cr√≠ticas (exceto warnings de ROI)
            SELECT 1 FROM #ValidationErrors ve 
            WHERE ve.ObjectName = D.ObjectName AND ve.IndexName = D.IndexName
            AND ve.ErrorType <> 'LOW_ROI_WARNING'
        );
        
        -- Crit√©rio 2: √çndices √≥rf√£os com baixo aproveitamento
        UPDATE D
        SET D.Deletar = 'S'
        FROM #Duplicates AS D
        LEFT JOIN #ROIAnalysis roi ON D.ObjectId = roi.ObjectId AND D.IndexId = roi.IndexId
        WHERE D.ObjectId IN (
            SELECT d2.ObjectId
            FROM #Duplicates AS d2
            GROUP BY d2.ObjectId, d2.PrimeiraChave
            HAVING COUNT(*) = 1  -- Aparece apenas uma vez no grupo
        )
        AND (D.PercAproveitamento < (@TaxaDeSeguranca / 2) OR roi.IsLowROI = 1)  -- Crit√©rio mais rigoroso ou baixo ROI
        AND D.IsPrimaryKey = 0
        AND D.IsUniqueConstraint = 0
        AND NOT EXISTS (
            SELECT 1 FROM #ValidationErrors ve 
            WHERE ve.ObjectName = D.ObjectName AND ve.IndexName = D.IndexName
            AND ve.ErrorType <> 'LOW_ROI_WARNING'
        );
        
        -- NOVA: Processamento de MERGE para √≠ndices com RecommendedAction = 'CONSIDER_MERGE'
        -- Tabela para armazenar scripts de merge
        CREATE TABLE #MergeScripts (
            ObjectId INT,
            ObjectName VARCHAR(128),
            BaseIndexName VARCHAR(128),
            OverlappingIndexName VARCHAR(128),
            MergedIndexName VARCHAR(128),
            CreateMergedScript NVARCHAR(MAX),
            DropBaseScript NVARCHAR(MAX),
            DropOverlappingScript NVARCHAR(MAX),
            EstimatedBenefit VARCHAR(100)
        );
        
        IF EXISTS (SELECT 1 FROM #SobreposicaoParcial WHERE RecommendedAction = 'CONSIDER_MERGE')
        BEGIN
            SET @StepTime = GETDATE();
            IF @Debug = 1
                PRINT 'Processando merge de √≠ndices sobrepostos...';
            
            -- Gerar scripts de merge para √≠ndices que devem ser consolidados
            INSERT INTO #MergeScripts (ObjectId, ObjectName, BaseIndexName, OverlappingIndexName, MergedIndexName, CreateMergedScript, DropBaseScript, DropOverlappingScript, EstimatedBenefit)
            SELECT 
                sp.ObjectId,
                OBJECT_NAME(sp.ObjectId) as ObjectName,
                sp.BaseIndexName,
                sp.OverlappingIndexName,
                -- Nome do √≠ndice merged
                CONCAT('IX_MERGED_', 
                       REPLACE(REPLACE(sp.BaseIndexName, 'IX_', ''), 'IDX_', ''), 
                       '_', 
                       RIGHT(REPLACE(REPLACE(sp.OverlappingIndexName, 'IX_', ''), 'IDX_', ''), 20)) as MergedIndexName,
                -- Script de cria√ß√£o do √≠ndice merged (combinando colunas)
                CONCAT(
                    'CREATE NONCLUSTERED INDEX [IX_MERGED_', 
                    REPLACE(REPLACE(sp.BaseIndexName, 'IX_', ''), 'IDX_', ''), 
                    '_', 
                    RIGHT(REPLACE(REPLACE(sp.OverlappingIndexName, 'IX_', ''), 'IDX_', ''), 20),
                    '] ON [', OBJECT_SCHEMA_NAME(sp.ObjectId), '].[', OBJECT_NAME(sp.ObjectId), '] (',
                    -- Combinar chaves dos dois √≠ndices (base + colunas adicionais do overlapping)
                    d1.Chave,
                    CASE 
                        WHEN LEN(ISNULL(d2.Chave, '')) > LEN(ISNULL(d1.Chave, '')) 
                        THEN CONCAT(', ', SUBSTRING(d2.Chave, LEN(d1.Chave) + 2, LEN(d2.Chave)))
                        ELSE ''
                    END,
                    ')',
                    -- Incluir colunas de ambos os √≠ndices
                    CASE 
                        WHEN LEN(ISNULL(d1.ColunasIncluidas, '')) > 0 OR LEN(ISNULL(d2.ColunasIncluidas, '')) > 0
                        THEN CONCAT(' INCLUDE (', 
                                   ISNULL(d1.ColunasIncluidas, ''),
                                   CASE WHEN LEN(ISNULL(d1.ColunasIncluidas, '')) > 0 AND LEN(ISNULL(d2.ColunasIncluidas, '')) > 0 THEN ', ' ELSE '' END,
                                   ISNULL(d2.ColunasIncluidas, ''),
                                   ')')
                        ELSE ''
                    END,
                    ';'
                ) as CreateMergedScript,
                -- Scripts de remo√ß√£o dos √≠ndices originais
                CONCAT('DROP INDEX [', sp.BaseIndexName, '] ON [', OBJECT_SCHEMA_NAME(sp.ObjectId), '].[', OBJECT_NAME(sp.ObjectId), '];') as DropBaseScript,
                CONCAT('DROP INDEX [', sp.OverlappingIndexName, '] ON [', OBJECT_SCHEMA_NAME(sp.ObjectId), '].[', OBJECT_NAME(sp.ObjectId), '];') as DropOverlappingScript,
                -- Benef√≠cio estimado
                CONCAT('Redu√ß√£o de ', FORMAT((d1.IndexSizeKB + d2.IndexSizeKB) / 1024.0, 'N1'), ' MB para ~', 
                       FORMAT((GREATEST(d1.IndexSizeKB, d2.IndexSizeKB) * 1.2) / 1024.0, 'N1'), ' MB') as EstimatedBenefit
            FROM #SobreposicaoParcial sp
            INNER JOIN #Duplicates d1 ON sp.ObjectId = d1.ObjectId AND sp.BaseIndexName = d1.IndexName
            INNER JOIN #Duplicates d2 ON sp.ObjectId = d2.ObjectId AND sp.OverlappingIndexName = d2.IndexName
            WHERE sp.RecommendedAction = 'CONSIDER_MERGE'
            AND d1.IsPrimaryKey = 0 AND d1.IsUniqueConstraint = 0
            AND d2.IsPrimaryKey = 0 AND d2.IsUniqueConstraint = 0;
            
            -- Marcar √≠ndices originais para dele√ß√£o ap√≥s merge
            UPDATE D
            SET D.Deletar = 'M'  -- 'M' = Merge (ser√° processado diferente)
            FROM #Duplicates D
            INNER JOIN #MergeScripts ms ON D.ObjectId = ms.ObjectId 
                AND (D.IndexName = ms.BaseIndexName OR D.IndexName = ms.OverlappingIndexName);
            
            IF @Debug = 1
            BEGIN
                DECLARE @MergeCount INT = (SELECT COUNT(*) FROM #MergeScripts);
                PRINT CONCAT('‚úì Identificados ', @MergeCount, ' grupos de √≠ndices para merge em ', 
                            DATEDIFF(MILLISECOND, @StepTime, GETDATE()), 'ms');
            END;
        END
        
        SET @TotalMarcadosParaDeletar = (SELECT COUNT(*) FROM #Duplicates WHERE Deletar = 'S');
        SET @EspacoLiberadoKB = (SELECT ISNULL(SUM(IndexSizeKB), 0) FROM #Duplicates WHERE Deletar = 'S');
        
        IF @Debug = 1
        BEGIN
            PRINT CONCAT('‚úì Marcados ', @TotalMarcadosParaDeletar, ' √≠ndices para dele√ß√£o em ', 
                        DATEDIFF(MILLISECOND, @StepTime, GETDATE()), 'ms');
            PRINT CONCAT('üíæ Espa√ßo estimado a ser liberado: ', FORMAT(@EspacoLiberadoKB / 1024.0, 'N2'), ' MB');
            
            IF EXISTS (SELECT 1 FROM #ValidationErrors)
            BEGIN
                PRINT '‚ö†Ô∏è  Avisos de valida√ß√£o encontrados:';
                SELECT * FROM #ValidationErrors;
            END;
        END;

        -- =============================================
        -- SE√á√ÉO 6: EXECU√á√ÉO - MERGE E REMO√á√ÉO DE √çNDICES
        -- =============================================
        
        -- SUBSECTION 6.1: PROCESSAMENTO DE MERGES
        IF @Efetivar = 1 AND EXISTS (SELECT 1 FROM #MergeScripts)
        BEGIN
            SET @StepTime = GETDATE();
            IF @Debug = 1
                PRINT 'Executando merge de √≠ndices sobrepostos...';
            
            DECLARE @MergeObjectId INT, @MergeObjectName VARCHAR(128), @MergeBaseIndex VARCHAR(128), @MergeOverlapIndex VARCHAR(128);
            DECLARE @CreateMergedSQL NVARCHAR(MAX), @DropBaseSQL NVARCHAR(MAX), @DropOverlapSQL NVARCHAR(MAX);
            DECLARE @MergeSuccessCount INT = 0, @MergeErrorCount INT = 0;
            
            DECLARE merge_cursor CURSOR FAST_FORWARD FOR
            SELECT ObjectId, ObjectName, BaseIndexName, OverlappingIndexName, 
                   CreateMergedScript, DropBaseScript, DropOverlappingScript
            FROM #MergeScripts
            ORDER BY ObjectName;
            
            OPEN merge_cursor;
            FETCH NEXT FROM merge_cursor INTO @MergeObjectId, @MergeObjectName, @MergeBaseIndex, @MergeOverlapIndex,
                                              @CreateMergedSQL, @DropBaseSQL, @DropOverlapSQL;
            
            WHILE @@FETCH_STATUS = 0
            BEGIN
                BEGIN TRY
                    -- 1. Criar o √≠ndice merged
                    EXEC sp_executesql @CreateMergedSQL;
                    
                    -- 2. Remover os √≠ndices originais
                    EXEC sp_executesql @DropBaseSQL;
                    EXEC sp_executesql @DropOverlapSQL;
                    
                    SET @MergeSuccessCount = @MergeSuccessCount + 1;
                    
                    IF @Debug = 1
                        PRINT CONCAT('‚úì Merge realizado: ', @MergeObjectName, ' (', @MergeBaseIndex, ' + ', @MergeOverlapIndex, ')');
                END TRY
                BEGIN CATCH
                    SET @MergeErrorCount = @MergeErrorCount + 1;
                    IF @Debug = 1
                        PRINT CONCAT('‚úó Erro no merge ', @MergeObjectName, ': ', ERROR_MESSAGE());
                END CATCH
                
                FETCH NEXT FROM merge_cursor INTO @MergeObjectId, @MergeObjectName, @MergeBaseIndex, @MergeOverlapIndex,
                                                  @CreateMergedSQL, @DropBaseSQL, @DropOverlapSQL;
            END
            
            CLOSE merge_cursor;
            DEALLOCATE merge_cursor;
            
            IF @Debug = 1
                PRINT CONCAT('‚úì Merge conclu√≠do: ', @MergeSuccessCount, ' sucessos, ', @MergeErrorCount, ' erros em ', 
                            DATEDIFF(MILLISECOND, @StepTime, GETDATE()), 'ms');
        END
        
        -- SUBSECTION 6.2: INSERIR √çNDICES MARCADOS PARA DELE√á√ÉO (exceto os j√° processados no merge)
        INSERT INTO #MarcadosParaDeletar
        SELECT F1.ObjectId,
               F1.ObjectName,
               F1.IndexName,
               F1.PercAproveitamento,
               F1.PrimeiraChave,
               F1.MesmaPrimeiraChave,
               F1.Chave,
               F1.Deletar,
               F1.ColunasIncluidas,
               F1.TamanhoChave,
               F1.MaximaChave,
               F1.TamanhoCInclude,
               F1.MaximaCInclude,
               F1.IsUnique,
               F1.IsPrimaryKey,
               F1.IsUniqueConstraint,
               CASE F1.DescTipo 
                   WHEN 1 THEN 'CLUSTERED'
                   WHEN 2 THEN 'NONCLUSTERED'
                   WHEN 3 THEN 'XML'
                   WHEN 4 THEN 'SPATIAL'
                   WHEN 5 THEN 'CLUSTERED COLUMNSTORE'
                   WHEN 6 THEN 'NONCLUSTERED COLUMNSTORE'
                   WHEN 7 THEN 'NONCLUSTERED HASH'
                   ELSE 'UNKNOWN'
               END,
               F1.IndexId,
               F1.IndexSizeKB
        FROM #Duplicates F1
        WHERE F1.Deletar = 'S'  -- Apenas √≠ndices marcados para dele√ß√£o simples (n√£o merge)
        ORDER BY F1.ObjectId,
                 F1.PrimeiraChave,
                 F1.PercAproveitamento ASC;  -- Deletar primeiro os de menor aproveitamento
                  
        -- SUBSECTION 6.3: REMO√á√ÉO DE √çNDICES DUPLICADOS RESTANTES
        IF (EXISTS (SELECT 1 FROM #MarcadosParaDeletar AS MPD) AND @Efetivar = 1)
        BEGIN
            IF @Debug = 1
            BEGIN
                SET @StepTime = GETDATE();
                PRINT CONCAT('‚è≥ Iniciando remo√ß√£o de √≠ndices... - ', FORMAT(@StepTime, 'HH:mm:ss'));
            END;
            
            DECLARE @RowCount INT = 1;
            DECLARE @TotalRows INT;
            DECLARE @CurrentObjectName VARCHAR(128);
            DECLARE @CurrentIndexName VARCHAR(128);
            DECLARE @Script NVARCHAR(1000);
            DECLARE @ErrorMessage NVARCHAR(4000);
            
            SELECT @TotalRows = COUNT(*) FROM #MarcadosParaDeletar;
            
            WHILE @RowCount <= @TotalRows
            BEGIN
                SELECT @CurrentObjectName = ObjectName,
                       @CurrentIndexName = IndexName
                FROM #MarcadosParaDeletar
                WHERE RowNum = @RowCount;
                
                BEGIN TRY
                    SET @Script = CONCAT('DROP INDEX [', @CurrentIndexName, '] ON ', @CurrentObjectName);
                    EXEC sys.sp_executesql @Script;
                    
                    SET @SuccessCount = @SuccessCount + 1;
                    
                    IF @Debug = 1
                        PRINT CONCAT('‚úì [', @RowCount, '/', @TotalRows, '] √çndice removido: ', @CurrentIndexName, ' da tabela ', @CurrentObjectName);
                        
                END TRY
                BEGIN CATCH
                    SET @ErrorMessage = ERROR_MESSAGE();
                    SET @ErrorCount = @ErrorCount + 1;
                    
                    IF @Debug = 1
                        PRINT CONCAT('‚úó [', @RowCount, '/', @TotalRows, '] Erro ao remover √≠ndice ', @CurrentIndexName, ': ', @ErrorMessage);
                END CATCH
                
                SET @RowCount = @RowCount + 1;
            END;
            
            IF @Debug = 1
            BEGIN
                PRINT CONCAT('‚úì Processo conclu√≠do em ', DATEDIFF(MILLISECOND, @StepTime, GETDATE()), 'ms');
                PRINT CONCAT('üìä Sucessos: ', @SuccessCount, ' | Erros: ', @ErrorCount);
            END;
        END;
    END;

    -- Relat√≥rio executivo SUPER APRIMORADO
    IF @MostrarResumoExecutivo = 1
    BEGIN
	DECLARE @quantidadeIndices INT = (SELECT COUNT(*) FROM #Indices);

        PRINT ''
        PRINT '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê'
        PRINT '                    RESUMO EXECUTIVO AVAN√áADO - OTIMIZA√á√ÉO DE √çNDICES'
        PRINT '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê'
        PRINT CONCAT('üïí Tempo total de execu√ß√£o: ', DATEDIFF(MILLISECOND, @StartTime, GETDATE()), 'ms')
        PRINT CONCAT('üìä Total de √≠ndices analisados: ', (@quantidadeIndices))
        PRINT CONCAT('üîç Total de √≠ndices duplicados encontrados: ', @TotalIndicesDuplicados)
        PRINT CONCAT('üéØ Total de √≠ndices marcados para dele√ß√£o: ', @TotalMarcadosParaDeletar)
        PRINT CONCAT('üíæ Espa√ßo estimado a ser liberado: ', FORMAT(@EspacoLiberadoKB / 1024.0, 'N2'), ' MB')
        
        -- NOVAS m√©tricas
        PRINT CONCAT('üîó Sobreposi√ß√µes parciais identificadas: ', @TotalSobreposicaoParcial)
        PRINT CONCAT('üìâ √çndices com baixo ROI: ', @TotalComBaixoROI)
        PRINT CONCAT('üóÑÔ∏è Query Store: ', CASE WHEN @QueryStoreEnabled = 1 THEN 'Habilitado e utilizado' ELSE 'N√£o dispon√≠vel' END)
        
        -- Relat√≥rio de Merges
        IF EXISTS (SELECT 1 FROM #MergeScripts)
        BEGIN
            DECLARE @TotalMergesRealizados INT = (SELECT COUNT(*) FROM #MergeScripts);
            PRINT CONCAT('üîÄ Merges de √≠ndices realizados: ', @TotalMergesRealizados)
            
            IF @Debug = 1
            BEGIN
                PRINT ''
                PRINT 'üìã DETALHES DOS MERGES REALIZADOS:'
                
                DECLARE @MergeDetails NVARCHAR(MAX) = '';
                SELECT @MergeDetails = @MergeDetails + 
                    CONCAT('  ‚Ä¢ ', ObjectName, ': ', BaseIndexName, ' + ', OverlappingIndexName, 
                           ' ‚Üí ', MergedIndexName, ' (', EstimatedBenefit, ')', CHAR(13) + CHAR(10))
                FROM #MergeScripts;
                
                IF LEN(@MergeDetails) > 0
                    PRINT @MergeDetails;
            END
        END
        ELSE
        BEGIN
            PRINT 'üîÄ Merges de √≠ndices realizados: 0'
        END
        
        IF @Efetivar = 1
        BEGIN
            PRINT ''
            PRINT '‚úÖ EXECU√á√ÉO EFETIVADA:'
            PRINT CONCAT('  ‚Ä¢ √çndices removidos com sucesso: ', @SuccessCount)
            PRINT CONCAT('  ‚Ä¢ Erros durante remo√ß√£o: ', @ErrorCount)
            PRINT CONCAT('  ‚Ä¢ Taxa de sucesso: ', FORMAT((@SuccessCount * 100.0) / NULLIF(@TotalMarcadosParaDeletar, 0), 'N1'), '%')
        END
        ELSE
        BEGIN
            PRINT ''
            PRINT 'üîç MODO SIMULA√á√ÉO - Nenhum √≠ndice foi efetivamente removido'
            PRINT '  Para efetivar as altera√ß√µes, execute com @Efetivar = 1'
        END
        
        -- An√°lise de impacto se dispon√≠vel
        IF @SimularImpacto = 1 AND LEN(@SimulationResults) > 0
        BEGIN
            PRINT ''
            PRINT 'üìà AN√ÅLISE DE IMPACTO:'
            PRINT @SimulationResults
        END
        
        -- Scripts de backup se gerados
        IF @GerarScriptBackup = 1 AND LEN(@BackupScript) > 0
        BEGIN
            PRINT ''
            PRINT 'üíæ SCRIPTS DE BACKUP GERADOS (primeiros 500 caracteres):'
            PRINT LEFT(@BackupScript, 500) + CASE WHEN LEN(@BackupScript) > 500 THEN '...' ELSE '' END
        END
        
        PRINT '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê'
        
        -- Relat√≥rios tabulares complementares
        SELECT 
            'üìä RESUMO EXECUTIVO' AS Tipo,
            @TotalIndicesDuplicados AS TotalIndicesDuplicados,
            @TotalMarcadosParaDeletar AS IndicesTotalParaDeletar,
            FORMAT(@EspacoLiberadoKB / 1024.0, 'N2') + ' MB' AS EspacoEstimadoLiberado,
            FORMAT(AVG(CAST(D.PercAproveitamento AS FLOAT)), 'N2') + '%' AS MediaAproveitamento,
            CASE WHEN @Efetivar = 1 THEN @SuccessCount ELSE 0 END AS IndicesRemovidosComSucesso,
            CASE WHEN @Efetivar = 1 THEN @ErrorCount ELSE 0 END AS ErrosNaRemocao,
            FORMAT(DATEDIFF(MILLISECOND, @StartTime, GETDATE()) / 1000.0, 'N2') + 's' AS TempoTotalExecucao
        FROM #Duplicates D
        WHERE EXISTS (SELECT 1 FROM #Duplicates);
        
        -- An√°lise por tabela
        IF EXISTS (SELECT 1 FROM #Duplicates)
        BEGIN
            SELECT 
                'üìã AN√ÅLISE POR TABELA' AS Tipo,
                D.ObjectName AS NomeTabela,
                COUNT(*) AS QtdIndicesDuplicados,
                COUNT(CASE WHEN D.Deletar = 'S' THEN 1 END) AS QtdMarcadosParaDeletar,
                FORMAT(SUM(CASE WHEN D.Deletar = 'S' THEN D.IndexSizeKB ELSE 0 END) / 1024.0, 'N2') + ' MB' AS EspacoLiberadoPorTabela,
                FORMAT(AVG(CAST(D.PercAproveitamento AS FLOAT)), 'N2') + '%' AS MediaAproveitamentoTabela
            FROM #Duplicates D
            GROUP BY D.ObjectName
            ORDER BY COUNT(*) DESC;
        END;
        
        -- NOVA: Relat√≥rio de sobreposi√ß√£o parcial
        IF @AnalisarSobreposicao = 1 AND EXISTS (SELECT 1 FROM #SobreposicaoParcial)
        BEGIN
            SELECT 
                'üîó SOBREPOSI√á√ÉO PARCIAL' AS Tipo,
                sp.BaseIndexName,
                sp.OverlappingIndexName,
                sp.SimilarityScore,
                sp.OverlapType,
                sp.RecommendedAction
            FROM #SobreposicaoParcial sp
            ORDER BY sp.SimilarityScore DESC;
        END;
        
        -- NOVA: Relat√≥rio de ROI
        IF EXISTS (SELECT 1 FROM #ROIAnalysis)
        BEGIN
            SELECT 
                'üìâ AN√ÅLISE DE ROI' AS Tipo,
                roi.IndexName,
                FORMAT(roi.ROI_Score, 'N4') AS ROI_Score,
                roi.QueryBenefitScore,
                FORMAT(roi.MaintenanceCostKB / 1024.0, 'N2') + ' MB' AS CustoManutencao,
                CASE WHEN roi.IsLowROI = 1 THEN 'SIM' ELSE 'N√ÉO' END AS BaixoROI
            FROM #ROIAnalysis roi
            ORDER BY roi.ROI_Score ASC;
        END;
    END;

    -- Relat√≥rio CONSOLIDADO de √≠ndices duplicados e marcados para dele√ß√£o
    IF (@MostrarIndicesDuplicados = 1 OR @MostrarIndicesMarcadosParaDeletar = 1)
    BEGIN
        -- Resultado √∫nico consolidado
        SELECT 
            CASE 
                WHEN D.Deletar = 'S' THEN 'A Deletar=>'
                ELSE 'Duplicado=>'
            END AS Descricao,
            D.ObjectName,
            D.IndexName,
            D.PercAproveitamento,
            D.PrimeiraChave,
            D.MesmaPrimeiraChave,
            D.Chave,
            D.Deletar,
            D.ColunasIncluidas,
            D.TamanhoChave,
            D.MaximaChave,
            CASE D.DescTipo 
                WHEN 1 THEN 'CLUSTERED'
                WHEN 2 THEN 'NONCLUSTERED'
                WHEN 3 THEN 'XML'
                WHEN 4 THEN 'SPATIAL'
                WHEN 5 THEN 'CLUSTERED COLUMNSTORE'
                WHEN 6 THEN 'NONCLUSTERED COLUMNSTORE'
                WHEN 7 THEN 'NONCLUSTERED HASH'
                ELSE 'UNKNOWN'
            END AS TipoIndice,
            FORMAT(D.IndexSizeKB / 1024.0, 'N2') + ' MB' AS TamanhoIndice,
            -- Informa√ß√µes de ROI se dispon√≠vel
            CASE 
                WHEN roi.ROI_Score IS NOT NULL THEN FORMAT(roi.ROI_Score, 'N4')
                ELSE 'N/A'
            END AS ROI_Score,
            CASE 
                WHEN roi.IsLowROI = 1 THEN 'SIM'
                WHEN roi.IsLowROI = 0 THEN 'N√ÉO'
                ELSE 'N/A'
            END AS BaixoROI
        FROM #Duplicates AS D
        LEFT JOIN #ROIAnalysis roi ON D.ObjectId = roi.ObjectId AND D.IndexId = roi.IndexId
        WHERE (@MostrarIndicesDuplicados = 1) 
           OR (@MostrarIndicesMarcadosParaDeletar = 1 AND D.Deletar = 'S')
        ORDER BY D.ObjectId,
                 D.PrimeiraChave,
                 D.IndexRank;

        -- Scripts de dele√ß√£o consolidados (apenas para √≠ndices marcados para deletar)
        IF @MostrarIndicesMarcadosParaDeletar = 1 AND EXISTS (SELECT 1 FROM #Duplicates WHERE Deletar = 'S')
        BEGIN
            SELECT 
                'üóëÔ∏è SCRIPTS DE DELE√á√ÉO' AS Tipo,
                D.ObjectName,
                D.IndexName,
                CONCAT('DROP INDEX [', D.IndexName, '] ON ', D.ObjectName) AS ScriptDele√ß√£o,
                FORMAT(D.IndexSizeKB / 1024.0, 'N2') + ' MB' AS EspacoLiberado
            FROM #Duplicates D
            WHERE D.Deletar = 'S'
            ORDER BY D.ObjectName, D.IndexName;
        END;
                 
        -- Scripts de backup se gerados
        IF @GerarScriptBackup = 1 AND EXISTS (SELECT 1 FROM #BackupScripts)
        BEGIN
            SELECT 
                'üíæ SCRIPTS DE BACKUP' AS Tipo,
                bs.ObjectName,
                bs.IndexName,
                bs.CreateScript,
                bs.DropScript
            FROM #BackupScripts bs
            ORDER BY bs.ObjectName, bs.IndexName;
        END;
    END;
    
    -- Log final
    IF @Debug = 1
    BEGIN
        PRINT '';
        PRINT CONCAT('=== FIM AN√ÅLISE √çNDICES DUPLICADOS - ', FORMAT(GETDATE(), 'dd/MM/yyyy HH:mm:ss'), ' ===');
        PRINT CONCAT('‚è±Ô∏è  Tempo total de execu√ß√£o: ', DATEDIFF(MILLISECOND, @StartTime, GETDATE()), 'ms');
        PRINT CONCAT('üìä Resumo: ', @TotalIndicesDuplicados, ' duplicados encontrados, ', @TotalMarcadosParaDeletar, ' marcados para dele√ß√£o');
        IF @Efetivar = 1
            PRINT CONCAT('üóëÔ∏è  Remo√ß√£o: ', @SuccessCount, ' sucessos, ', @ErrorCount, ' erros');
    END;
END;
GO