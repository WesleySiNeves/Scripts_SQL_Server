
-- Module 1 - Demo 1

-- Step 1 - start the load by right-clicking D:\Demofiles\Mod01\start_load_1.ps1 and click "Run with PowerShell" in Windows Explorer
-- then return to this window and follow the instructions below.
-- It may take a few seconds for activity from the load to appear in the queries
-- The load generated by the script will last for approximately 5 minutes. If you need to restart the load, start step 1 again

-- Step 2 - show sessions
-- Note that this query returns details each user session, including the client program name, 
-- security-related information, and the status of the session. 
SELECT * FROM sys.dm_exec_sessions 
WHERE dm_exec_sessions.session_id > 50
ORDER BY session_id DESC;



-- Step 3 - show requests
-- Note that this query returns a record for each active request, including a status 
-- column that shows if the request is running, runnable or suspended.

/*Retorna informações sobre cada solicitação sendo executada no SQL Server.
solicitações com  session_id < 50   são solicitações internas do SQL server*/

/* https://docs.microsoft.com/pt-br/sql/relational-databases/system-dynamic-management-views/sys-dm-exec-requests-transact-sql?view=sql-server-2017*/
SELECT * FROM sys.dm_exec_requests;

SELECT * FROM sys.dm_exec_requests
WHERE session_id > 50; --exclude system sessions

-- Step 4 - show tasks
-- Note that there is a record for each active task. 
-- The task_state column shows if the task is RUNNING, SUSPENDED or RUNNABLE.
SELECT * from sys.dm_os_tasks;

/*: Retorna uma linha para cada tarefa que está ativa na instância do SQL Server.*/
SELECT * from sys.dm_os_tasks
WHERE session_id > 50; --exclude system sessions and tasks not linked to a session


/*aqui conseguimos recuperar varios insides : */
SELECT * FROM  sys.sysprocesses AS S
WHERE S.spid IN 
(
53,
52,
55
)

-- Step 5 - show schedulers
-- Note that the current_tasks_count and runnable_tasks_count columns indicate total number of tasks 
-- and total number of runnable tasks respectively for a particular scheduler. 
-- A high number of runnable tasks for a long duration may indicate CPU pressure.
SELECT dm_os_schedulers.current_tasks_count,
       SUM(dm_os_schedulers.current_tasks_count) OVER () AS Total,
       *
FROM sys.dm_os_schedulers;

-- Step 6 - all information together
SELECT * 
FROM sys.dm_exec_sessions AS ses
JOIN sys.dm_exec_requests AS req
ON   req.session_id = ses.session_id
JOIN sys.dm_os_tasks AS tsk
ON   tsk.session_id = ses.session_id
JOIN sys.dm_os_schedulers AS sch
ON	 sch.scheduler_id = tsk.scheduler_id
WHERE ses.session_id > 50;

-- Step 7 - CPU history from sys.dm_os_ring_buffer
SELECT Notification_Time, ProcessUtilization AS SQLProcessUtilization,
SystemIdle, 100 - SystemIdle - ProcessUtilization AS OtherProcessUtilization
FROM (	SELECT	r.value('(./Record/@id)[1]', 'int') AS record_id,
				r.value('(./Record/SchedulerMonitorEvent/SystemHealth/SystemIdle)[1]', 'int') AS SystemIdle,
				r.value('(./Record/SchedulerMonitorEvent/SystemHealth/ProcessUtilization)[1]', 'int') AS ProcessUtilization,
				Notification_Time
		FROM (	SELECT	CONVERT(xml, record) as r,
						DATEADD(ms, (rbf.timestamp - tme.ms_ticks), 
						GETDATE()) as Notification_Time
				FROM sys.dm_os_ring_buffers AS rbf
				CROSS join sys.dm_os_sys_info tme
				WHERE ring_buffer_type = N'RING_BUFFER_SCHEDULER_MONITOR'
			) AS x
	) AS y
ORDER BY record_id DESC
